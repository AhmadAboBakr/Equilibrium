using UnityEngine;
using System.Collections;
using System.Xml;
using System.Security.Cryptography;
using System.IO;
using System;
using System.Collections.Generic;
using System.Text;





	 public class SaveData
    {
        
         
        public void CreateSaveFile()
        {

            if (!File.Exists(Application.persistentDataPath + "/Saved.bin"))
            {
                XmlWriterSettings settings = new XmlWriterSettings();
                settings.Indent = true;
                XmlWriter writer = XmlWriter.Create(Application.persistentDataPath +"/Saved.bin", settings);
                writer.WriteStartDocument();
                writer.WriteComment("This file is generated by Equilibrium.");
                writer.WriteStartElement("Game");
                writer.WriteEndElement();
                writer.WriteEndDocument();
                writer.Flush();
                writer.Close();
            }
            //else
            //{
            //    XmlWriterSettings settings = new XmlWriterSettings();
            //    settings.Indent = true;
            //    XmlWriter writer = XmlWriter.Create(Application.persistentDataPath + "/Saved.bin", settings);
            //    writer.WriteStartDocument();
            //    writer.WriteComment("This file is generated by Equilibrium.");
            //    writer.WriteStartElement("Game");
            //    writer.WriteEndElement();
            //    writer.WriteEndDocument();
            //    writer.Flush();
            //    writer.Close();
            //}

        }

        public void SaveItem(string key, string value)
        {
            if (!File.Exists(Application.persistentDataPath + "/Saved.bin"))
            {
                throw new FileNotFoundException("Save File Does Not Exist, Please Create One");
            }
            else
            {
                
                //value = StringToBinary(encryptData(value));
                XmlDocument doc = new XmlDocument();
                doc.Load(Application.persistentDataPath + "/Saved.bin");
                var myNode = doc.SelectSingleNode("Game");
                var ele = doc.CreateAttribute(key);
                ele.InnerText = value;
                myNode.Attributes.SetNamedItem(ele);
                doc.Save(Application.persistentDataPath + "/Saved.bin");
            }
        }

        public string GetItem(string key)
        {
            if (!File.Exists(Application.persistentDataPath + "/Saved.bin"))
            {
                throw new FileNotFoundException("Save File Does Not Exist, Please Create One");
            }
            else
            {
                
                XmlDocument doc = new XmlDocument();
                doc.Load(Application.persistentDataPath + "/Saved.bin");
                var node = doc.SelectSingleNode("Game");
                XmlAttributeCollection Items = node.Attributes;
                for (int i = 0; i < Items.Count; i++)
                {
                    if (Items[i].Name == key)
                        return Items[i].Value;//return decryptData(BinaryToString(Items[i].Value));
                }
            }
            return null;
        }

        public string encryptData(string toEncrypt)
        {
            byte[] keyArray = UTF8Encoding.UTF8.GetBytes("12345678901234567890123456789012");

            // 256-AES key
            byte[] toEncryptArray = UTF8Encoding.UTF8.GetBytes(toEncrypt);
            RijndaelManaged rDel = new RijndaelManaged();

            rDel.Key = keyArray;
            rDel.Mode = CipherMode.ECB;

            rDel.Padding = PaddingMode.PKCS7;

            ICryptoTransform cTransform = rDel.CreateEncryptor();
            byte[] resultArray = cTransform.TransformFinalBlock(toEncryptArray, 0, toEncryptArray.Length);

            return Convert.ToBase64String(resultArray, 0, resultArray.Length);
        }


        public string decryptData(string toDecrypt)
        {
            byte[] keyArray = UTF8Encoding.UTF8.GetBytes("12345678901234567890123456789012");

            // AES-256 key
            byte[] toEncryptArray = Convert.FromBase64String(toDecrypt);
            RijndaelManaged rDel = new RijndaelManaged();
            rDel.Key = keyArray;
            rDel.Mode = CipherMode.ECB;


            rDel.Padding = PaddingMode.PKCS7;

            // better lang support
            ICryptoTransform cTransform = rDel.CreateDecryptor();

            byte[] resultArray = cTransform.TransformFinalBlock(toEncryptArray, 0, toEncryptArray.Length);

            return UTF8Encoding.UTF8.GetString(resultArray);
        }

        public string StringToBinary(string data)
        {
            StringBuilder sb = new StringBuilder();

            foreach (char c in data.ToCharArray())
            {
                sb.Append(Convert.ToString(c, 2).PadLeft(8, '0'));
            }
            return sb.ToString();
        }

        public string BinaryToString(string data)
        {
            List<Byte> byteList = new List<Byte>();

            for (int i = 0; i < data.Length; i += 8)
            {
                byteList.Add(Convert.ToByte(data.Substring(i, 8), 2));
            }

            return System.Text.Encoding.ASCII.GetString(byteList.ToArray());
        }
    }


